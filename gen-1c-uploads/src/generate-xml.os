
#Использовать json

Функция ЗаписатьРезультатВФайл(ИмяФайла, Данные)
    Текст = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
    Текст.Записать(Данные);
    Текст.Закрыть();
КонецФункции // ЗаписатьРезультатВФайл(ИмяФайла,Данные)

/// @param ИмяФайла - Строка - Путь к файлу с модулем, если файл не указан берется основной файл модуля
/// @return Строка - Если файл прочитан
Функция ПолучитьТекстИзФайла(ИмяФайла = "")
    ФайлОбмена = Новый Файл(ИмяФайла);
    Данные = "";
    Если ФайлОбмена.Существует() Тогда
        Текст = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
        Данные = Текст.Прочитать();
        Текст.Закрыть();
    Иначе
        ВызватьИсключение "Файл не найден: " + ИмяФайла;
    КонецЕсли;
    возврат Данные;
КонецФункции

Функция ПолучитьОписаниеТипа(ТипСтр)
    
    Если СтрНайти(ТипСтр,".") > 0 Тогда
        ТипМ = СтрРазделить(ТипСтр, ".");
        Результат = "
        |<v8:Type>cfg:" + СвойстваМетаданных.КартаТипов[ТипМ[0]] + "." + ТипМ[1] + "</v8:Type>
        |";
    Иначе
        Если СвойстваМетаданных.КартаТипов.Свойство(ТипСтр) Тогда
            Результат = "
            |<v8:TypeSet>cfg:" + СвойстваМетаданных.КартаТипов[ТипСтр] + "</v8:TypeSet>
            |";
        Иначе
            Квалификатор = "";
            Если ТипСтр = "Булево" Тогда
                Результат = "<v8:Type>xs:boolean</v8:Type>
                |";
            ИначеЕсли СтрНачинаетсяС(ТипСтр, "Число") Тогда
                Результат = "<v8:Type>xs:decimal</v8:Type>
                |";
                ТипМ = СтрРазделить(ТипСтр, " ", Ложь);
                Если ТипМ.Количество() > 1 Тогда
                    Квалификатор  = Квалификатор  + "
                    |						<v8:NumberQualifiers>
                    |							<v8:Digits>" + ТипМ[1] + "</v8:Digits>
                    |							<v8:FractionDigits>" + ТипМ[2] + "</v8:FractionDigits>
                    |						</v8:NumberQualifiers>
                    |";
                КонецЕсли;
            ИначеЕсли СтрНачинаетсяС(ТипСтр, "Строка") Тогда
                Результат = "<v8:Type>xs:string</v8:Type>
                |";
                ТипМ = СтрРазделить(ТипСтр, " ", Ложь);
                Если ТипМ.Количество() > 1 Тогда
                    Квалификатор  = Квалификатор  + "
                    |						<v8:StringQualifiers>
                    |							<v8:Length>" + ТипМ[1] + "</v8:Length>
                    |							<v8:AllowedLength>Variable</v8:AllowedLength>
                    |						</v8:StringQualifiers>
                    |";
                КонецЕсли;
            ИначеЕсли ТипСтр = "Дата" Тогда
                Результат = "<v8:Type>xs:dateTime</v8:Type>
                |";
            ИначеЕсли ТипСтр = "ГУИД" Тогда
                Результат = "<v8:Type>v8:UUID</v8:Type>
                |";
            КонецЕсли;
        КонецЕсли
    КонецЕсли;
    
    Возврат Результат + Квалификатор; 
    
КонецФункции

Функция РаспарситьШаблон(Параметры)
    
    ДанныеШаблона = "";
    Для каждого Стр Из Параметры Цикл
        
        Если Стр.Ключ = "ТипМетаданных" Тогда
            Продолжить
        КонецЕсли;
        
        
        Если Стр.Ключ = "Реквизиты" Тогда
            Продолжить
        КонецЕсли;
        
        Если Стр.Ключ = "ТабличныеЧасти" Тогда
            Продолжить
        КонецЕсли;
        
        ЗначениеКлюча = Стр.Значение;
        
        Если Стр.Ключ = "Синоним" Тогда
            ЗначениеКлюча = "
            |	<v8:item>
            |		<v8:lang>ru</v8:lang>
            |		<v8:content>" + Стр.Значение + "</v8:content>
            |	</v8:item>
            |";
        КонецЕсли;
        
        
        Если Стр.Ключ = "МинимальноеЗначение" Тогда
            ЗначениеКлюча = "
            |	<MinValue xsi:type=""xs:string"">" + Стр.Значение + "</MinValue>
            |";
            ДанныеШаблона  = ДанныеШаблона  + ЗначениеКлюча;
            Продолжить
            
        КонецЕсли;
        
        Если Стр.Ключ = "МаксимальноеЗначение" Тогда
            ЗначениеКлюча = "
            |	<MaxValue xsi:type=""xs:string"">" + Стр.Значение + "</MaxValue>
            |";
            ДанныеШаблона  = ДанныеШаблона  + ЗначениеКлюча;
            Продолжить
            
        КонецЕсли;
        
        Если Стр.Ключ = "FillChecking" Тогда
            ЗначениеКлюча = ?(Стр.Значение=Истина,"ShowError","DontCheck");
        КонецЕсли;
        
        Если Стр.Ключ = "Тип" Тогда
            ТипыРеквизита = СтрРазделить(ЗначениеКлюча,",", Ложь);
            
            ЗначениеКлюча = "";
            Если ТипыРеквизита.Количество() > 0 Тогда
                
                Для каждого ЭлементТип Из ТипыРеквизита Цикл
                    
                    СтрЭлементТип = СокрЛП(ЭлементТип);
                    СтрЭлементТипы = СтрРазделить(СтрЭлементТип," ", Ложь);
                    // Если СтрЭлементТипы.Количество() = 1 Тогда
                    ЗначениеКлюча  = ЗначениеКлюча  + ПолучитьОписаниеТипа(СтрЭлементТип);
                    // Иначе
                    
                    // КонецЕсли;
                    
                    
                КонецЦикла;
                
            КонецЕсли;
            
        КонецЕсли;
        
        ДанныеШаблона  = ДанныеШаблона  + "
        |		<%Ключ%>%Значение%</%Ключ%>
        |";
        
        ДанныеШаблона = СтрЗаменить(ДанныеШаблона,"%Ключ%", СвойстваМетаданных.Карта[Стр.Ключ]);
        ДанныеШаблона = СтрЗаменить(ДанныеШаблона,"%Значение%", ЗначениеКлюча);
    КонецЦикла;
    Возврат ДанныеШаблона;
    
КонецФункции // РаспарситьШаблон(ФайлШаблона, Параметры)

Функция ПолучитьШапку(Параметры)
    
    Возврат "<Properties>" + РаспарситьШаблон(Параметры) + "</Properties>";
    
КонецФункции // ИмяФункции()

Функция ПолучитьРеквизиты(Параметры)
    
    Реквизиты = "
    |<ChildObjects>";
    Для каждого Реквизит Из Параметры Цикл
        
        Реквизиты  = Реквизиты  + "
        |<Attribute uuid=""" + (Новый УникальныйИдентификатор) + """>
        |	<Properties>";
        
        Реквизиты = Реквизиты + РаспарситьШаблон(Реквизит);
        
        Реквизиты  = Реквизиты  + "
        |	</Properties>
        |</Attribute>";
        
    КонецЦикла;
    Реквизиты  = Реквизиты  + "
    |</ChildObjects>";
    
    Возврат Реквизиты;
    
КонецФункции // ПолучитьРеквизиты()

Функция ПолучитьЗаголовки(Параметры)
    
    Результат = Новый Структура;
    СтрНачало = "<?xml version=""1.0"" encoding=""UTF-8""?>
    |<MetaDataObject xmlns=""http://v8.1c.ru/8.3/MDClasses"" 
    | xmlns:app=""http://v8.1c.ru/8.2/managed-application/core"" 
    | xmlns:cfg=""http://v8.1c.ru/8.1/data/enterprise/current-config""
    | xmlns:cmi=""http://v8.1c.ru/8.2/managed-application/cmi"" 
    | xmlns:ent=""http://v8.1c.ru/8.1/data/enterprise"" 
    | xmlns:lf=""http://v8.1c.ru/8.2/managed-application/logform"" 
    | xmlns:style=""http://v8.1c.ru/8.1/data/ui/style"" 
    | xmlns:sys=""http://v8.1c.ru/8.1/data/ui/fonts/system"" 
    | xmlns:v8=""http://v8.1c.ru/8.1/data/core"" 
    | xmlns:v8ui=""http://v8.1c.ru/8.1/data/ui"" 
    | xmlns:web=""http://v8.1c.ru/8.1/data/ui/colors/web"" 
    | xmlns:win=""http://v8.1c.ru/8.1/data/ui/colors/windows"" 
    | xmlns:xen=""http://v8.1c.ru/8.3/xcf/enums"" 
    | xmlns:xpr=""http://v8.1c.ru/8.3/xcf/predef"" 
    | xmlns:xr=""http://v8.1c.ru/8.3/xcf/readable"" 
    | xmlns:xs=""http://www.w3.org/2001/XMLSchema"" 
    | xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" version=""2.1"">
    |";
    СтрКонец = "";
    
    Если Параметры["ТипМетаданных"] = "ВнешнийОтчет" Тогда
        
        СтрНачало  = СтрНачало  + "	
        |<ExternalReport uuid=""" + (Новый УникальныйИдентификатор) + """>
        |		<InternalInfo>
        |			<xr:ContainedObject>
        |				<xr:ClassId>" + (Новый УникальныйИдентификатор) + "</xr:ClassId>
        |				<xr:ObjectId>" + (Новый УникальныйИдентификатор) + "</xr:ObjectId>
        |			</xr:ContainedObject>
        |			<xr:GeneratedType name=""ExternalReportObject." + Параметры["Имя"] + """ category=""Object"">
        |				<xr:TypeId>" + (Новый УникальныйИдентификатор) + "</xr:TypeId>
        |				<xr:ValueId>" + (Новый УникальныйИдентификатор) + "</xr:ValueId>
        |			</xr:GeneratedType>
        |		</InternalInfo>
        |";
        
        СтрКонец = "
        |</ExternalReport>";
    Иначе
    КонецЕсли;
    
    СтрКонец  = СтрКонец  + "
    |</MetaDataObject>";
    Результат.Вставить("Начало", СтрНачало);
    Результат.Вставить("Конец", СтрКонец);
    
    Возврат Результат;
    
КонецФункции // ПолучитьЗаголовки()

Функция ПолучитьТабличныеЧасти(Параметры)
    
    Реквизиты = "
    |<ChildObjects>";
    Для каждого Реквизит Из Параметры Цикл
        
        Реквизиты  = Реквизиты  + "
        |<Attribute uuid=""" + (Новый УникальныйИдентификатор) + """>
        |	<Properties>";
        
        Реквизиты = Реквизиты + РаспарситьШаблон(Реквизит);
        
        Реквизиты  = Реквизиты  + "
        |	</Properties>
        |</Attribute>";
        
    КонецЦикла;
    Реквизиты  = Реквизиты  + "
    |</ChildObjects>";
    
    Возврат Реквизиты;


КонецФункции // ПолучитьТабличныеЧасти(Параметры)

Процедура СоздатьФайлыПоПравилам(ФайлПравил) Экспорт
    
    Данные = ПолучитьТекстИзФайла(ФайлПравил);
    
    Параметры = Новый ПарсерJSON;
    Объект = Параметры.ПрочитатьJSON(Данные);
    
    Заголовки = ПолучитьЗаголовки(Объект);
    Шапка = ПолучитьШапку(Объект);
    Реквизиты = ПолучитьРеквизиты(Объект["Реквизиты"]);
    
    Результат = Заголовки.Начало +  Шапка + Реквизиты + Заголовки.Конец;
    
    Сообщить(Результат);
    
КонецПроцедуры

// СоздатьФайлыПоПравилам("c:\work\scripts\gen-1c-uploads\fixtures\test1.json");