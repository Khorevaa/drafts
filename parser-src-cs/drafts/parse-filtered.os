Функция ПолучитьТекстИзФайла(ИмяФайла = "")
    ФайлОбмена = Новый Файл(ИмяФайла);
    Данные = "";
    Если ФайлОбмена.Существует() Тогда
        Текст = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
        Данные = Текст.Прочитать();
        Текст.Закрыть();
    Иначе
        ВызватьИсключение "Файл не найден: " + ИмяФайла;
    КонецЕсли;
    возврат Данные;
КонецФункции

Функция ОбрататьТекст(ИмяФайла)

    Данные = ПолучитьТекстИзФайла(ИмяФайла);
																																											///	  \s*(public)\s+([^\)]*)\s*\(([^\)]*)\)
	РегВыражение = Новый РегулярноеВыражение("(^\s*\/\/\/[^\/](.*)|(\[)(ContextClass"
    	+"|ContextMethod|ContextProperty|ScriptConstructor)(\((\""(.*)\""(\s*),(\s*)\""(.*)\"")\))(\])"
        + "|\s*(public)\s+(.*)\s+(.*)\s*"
        //+"|^\s*(public)\s+([^class])(([^\)]*)\s*\(([^\)]*)\)|\r)"
        +"|\s+(\bget\b|\bset\b))");
    РегВыражение.ИгнорироватьРегистр = Истина;
    РегВыражение.Многострочный = Истина;

    Совпадения = РегВыражение.НайтиСовпадения(Данные);

	ДанныеДляПарсера = "";
    Для каждого Сп Из Совпадения Цикл

        СпГр = Сп.Группы;
        
        Если СокрЛП(СпГр[2].Значение) = "" Тогда
            ДанныеДляПарсера = ДанныеДляПарсера + Символы.ВК + Символы.ПС + СокрЛП(СпГр[1].Значение);
        КонецЕсли;
        ДанныеДляПарсера = ДанныеДляПарсера + Символы.ВК + Символы.ПС + СокрЛП(СпГр[2].Значение);

	КонецЦикла;    

	Сообщить(ДанныеДляПарсера);
    // РВ = Новый РегулярноеВыражение("((?s)(?<=\<summary\>)(.*?)(?=\<\/summary\>))|((?s)(?<=\<param\s+name=\""(.*?)\""\>)(.*?)(?=\<\/param\>))|((?s)(?<=\<returns\>)(.*?)(?=\<\/returns\>))|(\[)(ContextClass|ContextMethod|ContextProperty|ScriptConstructor)(\((\""(.*)\""(\s*),(\s*)\""(.*)\"")\))(\])|(^\s*(public)\s+(.*)\s+(.*)(\(((.*)|(.*)\r\n(.*))\)))|(\s+(\bget\b|\bset\b))");
    
    РВ = Новый РегулярноеВыражение("((?s)(?<=\<summary\>)(.*?)(?=\<\/summary\>))|((?s)(?<=\<remarks\>)(.*?)(?=\<\/remarks\>))|((?s)(?<=\<code\>)(.*?)(?=\<\/code\>))|((?s)(?<=\<example\>)(.*?)(?=\<\/example\>))|((?s)(?<=\<exception\s+cref=\""(.*)\""\>)(.*?)(?=\<\/exception\>))|((?s)(?<=\<param\s+name=\""(.*?)\""\>)(.*?)(?=\<\/param\>))|((?s)(?<=\<returns\>)(.*?)(?=\<\/returns\>))|(\[)(ContextClass|ContextMethod|ContextProperty|ScriptConstructor)(\((\""(.*)\""(\s*),(\s*)\""(.*)\"")\))(\])|(\s*(public)\s+([^\)]*)\s*\(([^\)]*)\))|((\bget\b|\bset\b))");
                            //      ^\s*(public)\s+(.*)\s*\(([^\)]*)\)
    // РВ = Новый РегулярноеВыражение("^\s*(public)\s+(\w*)\s*\(([^\)]*)\)");
    // РВ = Новый РегулярноеВыражение("^\s*(public)\s+([^\)]*)\s*\(([^\)]*)\)");
									
    РВ.ИгнорироватьРегистр = Истина;
    РВ.Многострочный = Истина;

    Совпадения = РВ.НайтиСовпадения(ДанныеДляПарсера);
    МассивМетодов = Новый Массив;

    СтруктураМетода = Новый Структура;

    Для каждого Сп Из Совпадения Цикл
        СпГр = Сп.Группы;
        //  А = 11;
        //  Сообщить(":::" + А + ":::" + Символы.ВК + Символы.ПС + СокрЛП(СпГр[А].Значение));

        Сообщить("=================================================");
        Для А = 0 По 100 Цикл
            Если СокрЛ(СокрЛП(СпГр[А].Значение)) <> "" Тогда
                Сообщить("----------------" + А + "----------------" + Символы.ВК + Символы.ПС + СокрЛП(СпГр[А].Значение));
            КонецЕсли;
        КонецЦикла;

		Стр = СокрЛП(СпГр[1].Значение);
        Если Стр <> "" Тогда
            БлокОписание = Стр;
        КонецЕсли;

		Стр = СокрЛП(СпГр[3].Значение);
        Если Стр <> "" Тогда
            БлокДопОписание = Стр;
        КонецЕсли;
		

    	ТипЭкспорта = СокрЛП(СпГр[18].Значение);
        Если ТипЭкспорта <> "" Тогда
			СтруктураМетода.Вставить("ТипЭкспорта", ТипЭкспорта);
			СтруктураМетода.Вставить("Имя", СокрЛП(СпГр[21].Значение));
			СтруктураМетода.Вставить("Алиас", СокрЛП(СпГр[24].Значение));

			СтруктураМетода.Вставить("Описание", БлокОписание);
			СтруктураМетода.Вставить("ДопОписание", БлокДопОписание);

			МассивМетодов.Добавить(СтруктураМетода);

			БлокОписание = "";
            БлокДопОписание = "";
			СтруктураМетода = Новый Структура;
        КонецЕсли;

        
    КонецЦикла;

	Для каждого Метод Из МассивМетодов Цикл
        Сообщить("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
        Сообщить("Имя: " + Метод.Имя);
        Сообщить("	Алиас: " + Метод.Алиас);
        Сообщить("	Описание: " + Метод.Описание);
        Сообщить("	Доп.описание: " + Метод.ДопОписание);
    КонецЦикла;

КонецФункции

ОбрататьТекст("fixtures/testdata.cs");
// ОбрататьТекст("fixtures/filtered.txt");