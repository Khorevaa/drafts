Перем мПутьКФайлуМодуля;

Функция ПолучитьТекстИзФайла(ИмяФайла = "")
    Если СокрЛП(ИмяФайла) = "" Тогда
        ИмяФайла = мПутьКФайлуМодуля;
    КонецЕсли;

    ФайлОбмена = Новый Файл(ИмяФайла);
    Данные = "";
    Если ФайлОбмена.Существует() Тогда
        Текст = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
        Данные = Текст.Прочитать();
        Текст.Закрыть();
    Иначе
        ВызватьИсключение "Файл не найден: " + ИмяФайла;
    КонецЕсли;
    возврат Данные;
КонецФункции

Функция ЗаписатьРезультатВФайл(ИмяФайла, Данные)
    Текст = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
    Текст.Записать(Данные);
    Текст.Закрыть();
КонецФункции // ЗаписатьРезультатВФайл(ИмяФайла,Данные)

/// Установка файла модуля для парсера
///
/// @param ИмяФайл - Строка. Путь к файлу модуля
//
Процедура УстановитьФайлМодуля(ИмяФайла) Экспорт
    
    Если СокрЛП(ИмяФайла) = "" Тогда
        ВызватьИсключение "Не указан файл модуля!";
    КонецЕсли;

    мПутьКФайлуМодуля = СокрЛП(ИмяФайла);

КонецПроцедуры

/// Получить путь к файлу модуля
///
/// @return Строка - Путь к файлу модуля
//
Функция ПолучитьФайлМодуля() Экспорт

    Возврат мПутьКФайлуМодуля;

КонецФункции

Функция ПолучитьЗначениеПростогоРегВыражения(РегВыражение, ИсходнаяСтрока)
    
    РегВыражение.ИгнорироватьРегистр = Истина;
    РегВыражение.Многострочный = Истина;
    Совпадения = РегВыражение.НайтиСовпадения(ИсходнаяСтрока);
    Возврат Совпадения[0].Группы[1].Значение;

КонецФункции // ПолучитьЗначениеПростогоРегВыражения()

Функция ПолучитьМетодыСОписанием() Экспорт
    Данные = ПолучитьТекстИзФайла();

    //РегВыражение = Новый РегулярноеВыражение("(^\s*\/\/\/[^\/](.*)|(\[)(ContextClass|ContextMethod|ContextProperty|ScriptConstructor)(\((.*)\))(\])|^\s*(public)\s+(.*)\(((.*)|(.*)\r\n(.*))\)\s+(.*))");
    //РегВыражение = Новый РегулярноеВыражение("(^\s*\/\/\/[^\/](.*)(\<summary\>)((.*)|(.*)\r\n(.*))(\<\/summary\>))");
    // РегВыражение = Новый РегулярноеВыражение("\/\/\/\s+\<summary\>\s+\/\/\/\s+\w+\s+=\s+\d+,\s+\/\/\/\s+\<\/summary\>");
    РегВыражение = Новый РегулярноеВыражение("(^\s*\/\/\/[^\/](.*)|(\[)(ContextClass|ContextMethod|ContextProperty|ScriptConstructor)(\((\""(.*)\""(\s*),(\s*)\""(.*)\"")\))(\])|^\s*(public)\s+(.*)\s+(.*)(\(((.*)|(.*)\r\n(.*))\))|\s+(\bget\b|\bset\b))");
    РегВыражениеВозврат = Новый РегулярноеВыражение("\<returns\>(.*)\<\/returns\>");
    РегВыражениеПараметры = Новый РегулярноеВыражение("\<param\s+name=\""(.*)\""\>(.*)\<\/param\>");

    РегВыражение.ИгнорироватьРегистр = Истина;
    РегВыражение.Многострочный = Истина;

    Совпадения = РегВыражение.НайтиСовпадения(Данные);
    МассивМетодов = Новый Массив;

    Документация = Новый Структура;
    ДокПараметры = Неопределено;
    ДокВозврат = Неопределено;
    ДокОписание = "";

    ЧастьОписание = "";
    ЧастьИспользование = "";
    ЧастьКласс = "";
    ЧастьПараметры = "";
    ЧастьПример = "";

    МассивЧленов = Новый Массив;

    ЭтоЭкспортноеИмя = Неопределено;
    ЭтоБлокОписания = Неопределено;

    МассивЭкспортныхТегов = Новый Массив;
    МассивЭкспортныхТегов.Добавить("ContextClass");
    МассивЭкспортныхТегов.Добавить("ContextProperty");
    МассивЭкспортныхТегов.Добавить("ContextMethod");
    МассивЭкспортныхТегов.Добавить("ScriptConstructor");

    ДоступностьСвойства = Новый Соответствие();
    ДоступностьСвойства.Вставить("get", "Чтение");
    ДоступностьСвойства.Вставить("set", "Запись");

    МассивВозвратов = Неопределено;
    МассивПараметров = Неопределено;
    МассивПараметровМетода = Неопределено;

    ОбработкаВставленногоМетода = Ложь;

    ВсеРазом = "";

    Для каждого Сп Из Совпадения Цикл

        СпГр = Сп.Группы;
        
        // Если СокрЛП(СпГр[2].Значение) = "" Тогда
        //     Сообщить(СокрЛП(СпГр[1].Значение));
        // КонецЕсли;

        Сообщить(СокрЛП(СпГр[2].Значение));
        

        // Для А = 0 По 20 Цикл
        //     Если СокрЛ(СокрЛП(СпГр[А].Значение)) <> "" Тогда
        //         Сообщить("" + А + ": " + СокрЛП(СпГр[А].Значение));
        //     КонецЕсли;
        // КонецЦикла;


        //# Описание
        Значение2 = СокрЛП(СпГр[2].Значение);
        Если Значение2 = "<summary>" Тогда
            ЭтоБлокОписания = Истина;
            ЧастьОписание  = "";
            Продолжить;
        ИначеЕсли Значение2 = "</summary>" Тогда
            ЭтоБлокОписания = Ложь;
            Продолжить;
        ИначеЕсли СтрНачинаетсяС(Значение2, "<returns>") Тогда
            Если МассивВозвратов = Неопределено Тогда
                МассивВозвратов = Новый Массив;
            КонецЕсли;
            МассивВозвратов.Добавить(ПолучитьЗначениеПростогоРегВыражения(РегВыражениеВозврат, Значение2));
        ИначеЕсли СтрНачинаетсяС(Значение2, "<param ") Тогда
            Если МассивПараметров = Неопределено Тогда
                МассивПараметров = Новый Массив;
            КонецЕсли;
            
            РегВыражениеПараметры.ИгнорироватьРегистр = Истина;
            РегВыражениеПараметры.Многострочный = Истина;
            СовпаденияПараметры = РегВыражениеПараметры.НайтиСовпадения(Значение2);
            Попытка
                Стр1 = СовпаденияПараметры[0].Группы[1].Значение;
                Стр2 = СовпаденияПараметры[0].Группы[2].Значение;
            Исключение
                Сообщить("Ошибка парсинга: " + мПутьКФайлуМодуля + ":" + Значение2);
            КонецПопытки;

            ПараметрМетода = Новый Структура;
            ПараметрМетода.Вставить(Стр1, Стр2);
            МассивПараметров.Добавить(ПараметрМетода);
        КонецЕсли;

        Если ЭтоБлокОписания = Истина Тогда
            ЧастьОписание = ЧастьОписание + Значение2 + Символы.ВК + Символы.ПС; 
        КонецЕсли;
        //# 

        //# Экспортные члены
        Значение4 = СокрЛП(СпГр[4].Значение);
        Если (МассивЭкспортныхТегов.Найти(Значение4) <> Неопределено) Тогда
            ЭтоЭкспортноеИмя = Истина;
        КонецЕсли;

        
        Значение15 = СокрЛП(СпГр[16].Значение);
        Если (Значение15 <> "") Тогда
            
            Если Найти(СокрЛП(СпГр[0].Значение),":") > 0 Тогда
                Продолжить;
            КонецЕсли;

            // Сообщить("разбор параметров: " + Значение15);

            ПараметрыМетода = Новый ТаблицаЗначений;
            ПараметрыМетода = Новый ТаблицаЗначений;
            ПараметрыМетода.Колонки.Добавить("Тип");
            ПараметрыМетода.Колонки.Добавить("Имя");
            ПараметрыМетода.Колонки.Добавить("ПоЗначению");
            ПараметрыМетода.Колонки.Добавить("ЗначениеПоУмолчанию");
            ПараметрыМетода.Колонки.Добавить("Описание");            

            МассивПараметры = СтрРазделить(Значение15,",", Ложь);
            Для каждого Элемент Из МассивПараметры Цикл
                Элемент = СокрЛП(Элемент);

                

                РегВыражениеЗначения = новый РегулярноеВыражение("(=|\s)(?=(?:[^\""]*\""[^\""]*\"")*(?![^\""]*\""))");
                
                // РегВыражениеЗамены = новый РегулярноеВыражение("(\s)(?=(?:[^\""]*\""[^\""]*\"")*(?![^\""]*\""))");
                // Элемент = РегВыражениеЗамены.Заменить(Элемент,"");
                // Сообщить(Элемент);

                СтруктураПараметра = РегВыражениеЗначения.Разделить(Элемент,Ложь);

                // Я = -1;
                // Для каждого Переменная Из СтруктураПараметра Цикл
                //     Я = Я + 1;
                //     Сообщить("" + Я+ ":" + Переменная);
                // КонецЦикла;

                Если СтруктураПараметра.Количество() = 0 Тогда
                    Продолжить;
                КонецЕсли;

                СтрокаТЗ = ПараметрыМетода.Добавить();
                Попытка
                    СтрокаТЗ.Имя = СтруктураПараметра[2];
                    СтрокаТЗ.Тип = СтруктураПараметра[0];
                Исключение
                    Сообщить("Ошибка: " + СокрЛП(СпГр[0].Значение));
                КонецПопытки;

                // Сообщить(СтруктураПараметра[0]);

                // СтрокаТЗ.ПоЗначению = ПереданПоЗначению;
                // Сообщить(СтруктураПараметра.Количество());
                Если СтруктураПараметра.Количество() > 3 Тогда
                    СтрокаТЗ.ЗначениеПоУмолчанию  = СтруктураПараметра [СтруктураПараметра.Количество()-1] ;
                КонецЕсли;

                Если МассивПараметров <> Неопределено Тогда
                    Для каждого ЭлементПараметра Из МассивПараметров Цикл
                        Если ЭлементПараметра.Свойство(СтрокаТЗ.Имя) Тогда
                            СтрокаТЗ.Описание = ЭлементПараметра[СтрокаТЗ.Имя];
                        КонецЕсли;
                    КонецЦикла;
                КонецЕсли;
            КонецЦикла;
        Иначе
            ПараметрыМетода = Неопределено;
        КонецЕсли;


        Значение19 = СокрЛП(СпГр[20].Значение);
        Если (Значение19 <> "") Тогда
            ЧастьИспользование = ЧастьИспользование + "," + ДоступностьСвойства.Получить(Значение19);
        КонецЕсли;


        Если ЭтоЭкспортноеИмя = Истина Тогда
            Значение6 = СокрЛП(СпГр[6].Значение);
            
            СтруктураЧлена = Новый Структура;
            СтруктураЧлена.Вставить("Тег", Значение4);
            СтруктураЧлена.Вставить("ИмяРус", СокрЛП(СпГр[7].Значение));
            СтруктураЧлена.Вставить("ИмяАнг", СокрЛП(СпГр[10].Значение));
            СтруктураЧлена.Вставить("Описание", ЧастьОписание);
            СтруктураЧлена.Вставить("ВозвращаемоеЗначение", МассивВозвратов);
            СтруктураЧлена.Вставить("Параметры", Неопределено);
            

            ЧастьОписание = "";
            
            ЭтоЭкспортноеИмя = Ложь;
            МассивВозвратов = Неопределено;
            
            ОбработкаВставленногоМетода = Истина;

            МассивЧленов.Добавить(СтруктураЧлена);
            Продолжить;

        КонецЕсли;
        //# 

        Если ОбработкаВставленногоМетода = Истина Тогда
            СтруктураЧлена.Вставить("Параметры", ПараметрыМетода);
            // Сообщить("-установка параметра: " + ПараметрыМетода);
            МассивПараметров = Неопределено;
            ПараметрыМетода= Неопределено;
            
            //TODO: Придумать, что сделать с доступностью свойств
            // Если Значение4 = "ContextProperty" Тогда
            СтруктураЧлена.Вставить("Использование", Сред(ЧастьИспользование,2));
            // Сообщить(":::::" + Сред(ЧастьИспользование,2));
            ЧастьИспользование = "";
            // КонецЕсли;


            ОбработкаВставленногоМетода = Ложь;
        КонецЕсли;

    КонецЦикла;

    Возврат МассивЧленов;
    // Сообщить(ДокОписание);

КонецФункции // ПолучитьМетодыСОписанием() Экспорт

УстановитьФайлМодуля("fixtures/testdata.cs");
МассивЧленов = ПолучитьМетодыСОписанием();

// Сообщить("``````````````````````````````````````````````````````");

// Для каждого Стр Из МассивЧленов Цикл
//     Сообщить("~~~~~~~~~~~~~~~~~~~~~~~~");
//     Сообщить("" +  Стр.Тег + ": " + Стр.ИмяРус + " / " + Стр.ИмяАнг);
//     Сообщить("	Описание: ");
//     Сообщить("		" + Стр.Описание);
//     Если Стр.ВозвращаемоеЗначение <> Неопределено Тогда
//         Сообщить("	Возврат: ");
//         Для каждого СтрВ Из Стр.ВозвращаемоеЗначение Цикл
//             Сообщить("		" + СтрВ);
//         КонецЦикла;
//     КонецЕсли;
//     Если Стр.Параметры <> Неопределено Тогда
//         Сообщить("	Параметры: " + Стр.Параметры);

//         Параметры = Стр.Параметры;
//         Если Параметры <> Неопределено Тогда

//             СтрОписаниеПараметров = "";

//             Для каждого Параметр Из Параметры Цикл
//                 Сообщить("		- " + Параметр.Имя + " : " + Параметр.Тип);

//                 Сообщить("			Значение по умолчанию: " + Параметр.ЗначениеПоУмолчанию);
//                 Сообщить("			Обязательность: " + ?(СокрЛП(Параметр.ЗначениеПоУмолчанию) = "", " (обязательный)", " (необязательный)")) ;

//                 Если СокрЛП(Параметр.Описание) <> "" Тогда
//                     Сообщить("			Описание: " + СокрЛП(Параметр.Описание));
//                 КонецЕсли;

//             КонецЦикла;
//         КонецЕсли;        
//     КонецЕсли;

//     // Если Стр.Тег = "ContextProperty" Тогда
//         Сообщить("	Использование: " + Стр.Использование);
//     // КонецЕсли;
// КонецЦикла;